// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// マスターデータ: 静的データ
// ============================================

model Type {
  id        Int      @id @default(autoincrement())
  name      String   @unique // 例: "ほのお", "みず", "でんき"
  nameEn    String   @unique @map("name_en") // 例: "Fire", "Water", "Electric"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // リレーション
  pokemonPrimaryTypes   Pokemon[]           @relation("PrimaryType")
  pokemonSecondaryTypes Pokemon[]           @relation("SecondaryType")
  moves                 Move[]
  typeEffectivenessFrom TypeEffectiveness[] @relation("TypeFrom")
  typeEffectivenessTo   TypeEffectiveness[] @relation("TypeTo")

  @@map("types")
}

model Pokemon {
  id              Int    @id @default(autoincrement())
  nationalDex     Int    @unique @map("national_dex") // 図鑑番号
  name            String @unique // 例: "ピカチュウ"
  nameEn          String @unique @map("name_en") // 例: "Pikachu"
  primaryTypeId   Int    @map("primary_type_id")
  secondaryTypeId Int?   @map("secondary_type_id") // null許可（単タイプの場合）

  // 基本ステータス
  baseHp             Int @map("base_hp")
  baseAttack         Int @map("base_attack")
  baseDefense        Int @map("base_defense")
  baseSpecialAttack  Int @map("base_special_attack")
  baseSpecialDefense Int @map("base_special_defense")
  baseSpeed          Int @map("base_speed")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // リレーション
  primaryType      Type             @relation("PrimaryType", fields: [primaryTypeId], references: [id])
  secondaryType    Type?            @relation("SecondaryType", fields: [secondaryTypeId], references: [id])
  pokemonAbilities PokemonAbility[]
  pokemonMoves     PokemonMove[]

  @@map("pokemons")
}

model Ability {
  id             Int             @id @default(autoincrement())
  name           String          @unique // 例: "いかく", "ふみん" - アプリケーション側でロジックを識別するキー
  nameEn         String          @unique @map("name_en") // 例: "Intimidate", "Insomnia"
  description    String // UI表示用の説明文
  triggerEvent   AbilityTrigger  @map("trigger_event") // ロジックの発動タイミング（補助フラグ）
  effectCategory AbilityCategory @map("effect_category") // 効果の大まかな分類（補助フラグ）

  // 注意: ロジックそのもの（例: 「HPが満タンならダメージ半減」）はDBに保存しない
  // アプリケーション側で name をキーとしてロジックを管理

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // リレーション
  pokemonAbilities PokemonAbility[]

  @@map("abilities")
}

enum AbilityTrigger {
  OnEntry // 場に出すとき
  OnTakingDamage // ダメージを受けるとき
  OnDealingDamage // ダメージを与えるとき
  OnTurnEnd // ターン終了時
  OnSwitchOut // 場から下がるとき
  Passive // 常時発動（無効化されない限り）
  OnStatusCondition // 状態異常になったとき
  Other // その他
}

enum AbilityCategory {
  StatChange // ステータス変化
  Immunity // 無効化
  Weather // 天候
  DamageModify // ダメージ修正
  StatusCondition // 状態異常
  Other // その他
}

model Move {
  id          Int          @id @default(autoincrement())
  name        String       @unique // 例: "かえんほうしゃ", "ハイドロポンプ"
  nameEn      String       @unique @map("name_en") // 例: "Flamethrower", "Hydro Pump"
  typeId      Int          @map("type_id")
  category    MoveCategory // 物理、特殊、変化
  power       Int? // null許可（変化技の場合）
  accuracy    Int? // null許可（必中技の場合）
  pp          Int          @default(1) // 使用可能回数
  priority    Int          @default(0) // 優先度
  description String? // UI表示用の説明文

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // リレーション
  type         Type          @relation(fields: [typeId], references: [id])
  pokemonMoves PokemonMove[]

  @@map("moves")
}

enum MoveCategory {
  Physical // 物理
  Special // 特殊
  Status // 変化
}

model TypeEffectiveness {
  id            Int   @id @default(autoincrement())
  typeFromId    Int   @map("type_from_id") // 技のタイプ
  typeToId      Int   @map("type_to_id") // 受けるポケモンのタイプ
  effectiveness Float // 0, 0.5, 1.0, 2.0 のいずれか

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // リレーション
  typeFrom Type @relation("TypeFrom", fields: [typeFromId], references: [id])
  typeTo   Type @relation("TypeTo", fields: [typeToId], references: [id])

  // 同じ組み合わせは1つだけ
  @@unique([typeFromId, typeToId])
  @@map("type_effectiveness")
}

// ポケモンと特性の中間テーブル（ポケモンは複数の特性を持てる）
model PokemonAbility {
  id        Int      @id @default(autoincrement())
  pokemonId Int      @map("pokemon_id")
  abilityId Int      @map("ability_id")
  isHidden  Boolean  @default(false) @map("is_hidden") // 夢特性かどうか
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  ability Ability @relation(fields: [abilityId], references: [id], onDelete: Cascade)

  // 同じポケモンに同じ特性は1つだけ
  @@unique([pokemonId, abilityId])
  @@map("pokemon_abilities")
}

// ポケモンと技の中間テーブル（ポケモンが覚えられる技）
model PokemonMove {
  id        Int      @id @default(autoincrement())
  pokemonId Int      @map("pokemon_id")
  moveId    Int      @map("move_id")
  level     Int? // 何レベルで覚えるか（nullの場合は進化前から覚えられる等）
  method    String? // 覚え方（"level_up", "tm", "egg", "tutor"など）
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  move    Move    @relation(fields: [moveId], references: [id], onDelete: Cascade)

  @@map("pokemon_moves")
}
